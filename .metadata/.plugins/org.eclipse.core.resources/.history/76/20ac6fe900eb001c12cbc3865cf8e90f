package com.ordermanagement;

import static org.junit.Assert.assertNotNull;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

import com.ordermanagement.controller.OrderController;
import com.ordermanagement.model.Address;
import com.ordermanagement.model.Order;
import com.ordermanagement.model.OrderItem;
import com.ordermanagement.model.OrderLine;
import com.ordermanagement.model.OrderLineStatus;
import com.ordermanagement.model.Status;
import com.ordermanagement.reponse.MessageResponse;
import com.ordermanagement.reponse.OrderListResult;
import com.ordermanagement.reponse.OrderResult;
import com.ordermanagement.reponse.ResultResponse;
import com.ordermanagement.service.OrderRepository;
import com.ordermanagement.service.OrderService;

@RunWith(SpringRunner.class)
@SpringBootTest
@AutoConfigureMockMvc
public class OrderServiceTest {

	@Mock
	OrderService orderService;

	@Autowired
	OrderRepository orderRepository;

	@Mock
	OrderController controller;
	@Mock
	ResultResponse response;

	@Mock
	OrderResult orderResult;

	@Mock
	OrderListResult listResult;

	@Test
	public void createOrderTestForNotNullCheck() {
		Order order = createOrder();
		OrderService orderService = Mockito.mock(OrderService.class);
		Mockito.when(orderService.saveOrder(order))
				.thenReturn(new ResultResponse(200, MessageResponse.SAVE_SUCCESFULL));
		ResultResponse result = controller.postOrderDetails(order);
		assertNotNull(result);
	}

	private Order createOrder() {
		Order order = new Order();
		order.setOrderLines(getListOfOrderLines());
		order.setOrderDate(getDate());
		order.setStatus(Status.OPEN);
		order.setTotalAmount(100000.0f);
		return order;
	}

	private List<OrderLine> getListOfOrderLines() {
		List<OrderLine> listOfOrderLines = new ArrayList<>();
		OrderLine orderLine = new OrderLine();
		orderLine.setEta(getDate());
		orderLine.setAddresses(getListOfAddress());
		orderLine.setListOfItems(getListOfItems());
		orderLine.setStatusLine(OrderLineStatus.OPEN);
		listOfOrderLines.add(orderLine);
		return listOfOrderLines;
	}

	private List<OrderItem> getListOfItems() {
		List<OrderItem> listOfItems = new ArrayList<>();
		OrderItem item = new OrderItem();
		item.setItemName("item1");
		item.setPrice(5000.0f);
		item.setQuantity(1);
		listOfItems.add(item);
		return listOfItems;

	}

	private List<Address> getListOfAddress() {
		List<Address> listOfAddress = new ArrayList<>();
		Address address = new Address();
		address.setState("ap");
		address.setCountry("India");
		address.setZipCode(782137);
		listOfAddress.add(address);
		return listOfAddress;
	}

	private Date getDate() {
		Date date = null;
		String sDate1 = "2022/06/10";
		try {
			date = new SimpleDateFormat("yyyy/MM/dd").parse(sDate1);
		} catch (ParseException e) {
			// LOGGER
		}
		return date;
	}
}
